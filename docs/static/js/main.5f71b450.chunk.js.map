{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prev","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"4NAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAAyBO,OACvCN,EAAc,MAKlB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,aAkB3BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCC1BrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCF,EADnC,+DAEAG,MAAMD,GAFN,cAEbE,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATnB,kBAYZK,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEzB,ECH2B,SAACA,GAC3B,MAA0BlB,mBAAS,CACjC8B,OAAQ,GACRO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OARAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACtBH,EAAS,CACPT,OAAQY,EACRL,SAAS,SAGZ,CAACnB,IACGoB,EDXkBK,CAAazB,GAAhCY,EAAP,EAAOA,OAAQO,EAAf,EAAeA,QAEd,OACE,qCACE,oBAAIJ,UAAU,uCAAd,SAAsDf,IACrDmB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEX1BgB,EAAe,WAC1B,MAAoC5C,mBAAS,CAC3C,kBADF,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAIA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG8C,EAAWnB,KAAI,SAACR,EAAU4B,GAAX,OAAqB,cAAC,EAAD,CAAqB5B,SAAUA,GAAjB4B,YCT3DC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.5f71b450.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) =>{\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2){\r\n        setCategories((prev) => [inputValue,...prev]);\r\n        setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=OXQreuQYgLbrN8gAUBsXkhF4yPqU6CQj`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n const {images, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__headShake\">{category}</h3>\r\n      {loading && <h1>Loading...</h1>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    images: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setstate({\r\n        images: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    \"One punch man\"\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category, index) => <GifGrid key={index} category={category}/>)}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}